#!/usr/bin/env python2.7

import argparse
import collections
import os
import re
import subprocess
import sys

template = '''
builddir = obj
rule cc
    command     = {cc} {cflags} -MMD -MF $out.d -c $in -o $out
    depfile     = $out.d
    deps        = gcc
    description = compile $out
rule link
    command     = {cc} {ldflags} $in -o $out
    description = link $out
'''

parser = argparse.ArgumentParser(description='ob, opinionated builder')
for mode in ['debug', 'release', 'ASAN', 'TSAN']:
    parser.add_argument('-'+mode.upper()[0], '--'+mode.lower(),
                        action='store_const', dest='mode', const=mode.lower(), help=mode)
args,ninja_args = parser.parse_known_args()

cc = os.getenv('CC', 'clang')
is_clang = 'clang' in cc

if args.mode == 'asan':
    cc += ' -fsanitize=address,undefined'
if args.mode == 'tsan':
    cc += ' -fsanitize=thread'
if args.mode == 'release':
    cc += ' -flto -fomit-frame-pointer'

cflags = '-fPIC'
cflags += ' -fcolor-diagnostics' if is_clang else ' -fdiagnostics-color'
if args.mode != 'debug':
    cflags += ' -Os'
if args.mode != 'release':
    cflags += ' -Werror'
    cflags += ' -Weverything -Wno-padded' if is_clang else ' -Wall -Wextra'
if args.mode == 'release':
    cflags += ' -DNDEBUG'
cflags += ' ' + os.getenv('CFLAGS', '')

ldflags = os.getenv('LDFLAGS', '')

mains = subprocess.check_output(['git', 'grep', '-lw', 'int main', '**.c']).split()

srcs = set()
todo = list(mains)
deps = collections.defaultdict(set)

include = re.compile('#include "(.*)\.h')
while todo:
    src = todo.pop()
    srcs.add(src)
    for line in open(src):
        line = line.strip()
        m = include.match(line)
        if m:
            dep = m.group(1) + '.c'
            dep = os.path.join(os.path.dirname(src), dep)
            if dep != src:
                deps[src].add(dep)
            if dep not in srcs:
                todo.append(dep)

def ext(path, new_ext):
    return os.path.splitext(path)[0] + new_ext

def resolve_deps(path):
    objs = {os.path.join('obj', ext(path,'.o'))}
    for dep in deps[path]:
        objs.update(resolve_deps(dep))
    return objs

with open('build.ninja', 'w') as f:
    f.write(template.format(cc=cc, cflags=cflags, ldflags=ldflags))
    for src in srcs:
        f.write('build obj/{obj}: cc {src}\n'.format(obj=ext(src,'.o'), src=src))
    for src in mains:
        f.write('build bin/{exe}: link {objs}\n'.format(exe=ext(src,''),
                                                        objs=' '.join(sorted(resolve_deps(src)))))

rc = subprocess.call(['ninja'] + ninja_args)
os.remove('build.ninja')
sys.exit(rc)
